import logging
from openai import OpenAI
import asyncio
from states import TestState
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

async def generate_questions(client: OpenAI, user_id: int, state: FSMContext, subject: str = None, subject_1: str = None, subject_2: str = None) -> None:
    is_premium = await is_premium_user(user_id)
    num_questions = 10 if is_premium else 5
    subjects_to_generate = []

    if subject:
        subjects_to_generate.append(subject)
    elif subject_1 and subject_2:
        subjects_to_generate.extend([subject_1, subject_2])

    if not subjects_to_generate:
        await state.bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞.", show_alert=True)
        return

    if not is_premium and not await can_generate_questions(user_id):
        premium_info = (
            "üöÄ <b>–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π? –û—Ñ–æ—Ä–º–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É!</b>\n\n"
            "üíé <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium:</b>\n"
            "    - –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ç–µ—Å—Ç (10 –≤–º–µ—Å—Ç–æ 5).\n"
            "    - –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.\n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ Premium –∏ —Å–ø–æ—Å–æ–±–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ /premium (—Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)."
        )
        await state.bot.send_message(
            user_id,
            f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (4 —Ä–∞–∑–∞).\n\n{premium_info}",
            reply_markup=await get_main_menu_keyboard()
        )
        return

    all_questions_combined = []
    all_correct_answers_combined = []
    generated_subjects = []

    try:
        for sub in subjects_to_generate:
            prompt = (
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {num_questions} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{sub}' –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ù–¢. "
                "–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (A, B, C, D) –∏ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. "
                "–§–æ—Ä–º–∞—Ç:\n\n–í–æ–ø—Ä–æ—Å: ...\nA) ...\nB) ...\nC) ...\nD) ...\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: X\n\n"
                "–í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."
            )
            response = await asyncio.to_thread(
                client.chat.completions.create,
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7
            )
            generated_text = response.choices[0].message.content.strip()
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ {sub}:\n{generated_text}")

            question_blocks = [block.strip() for block in generated_text.split("\n\n") if block.strip()]
            subject_questions = []
            subject_correct_answers = []
            for block in question_blocks:
                lines = [line.strip() for line in block.split("\n") if line.strip()]
                if len(lines) < 6:
                    continue
                question_text = "\n".join(lines[:-1])
                correct_answer = lines[-1].split(":")[-1].strip().upper()
                if correct_answer in ("A", "B", "C", "D"):
                    subject_questions.append(question_text)
                    subject_correct_answers.append(correct_answer)

            all_questions_combined.append(subject_questions)
            all_correct_answers_combined.append(subject_correct_answers)
            generated_subjects.append(sub)

        await state.update_data(
            all_questions=all_questions_combined,
            all_correct_answers=all_correct_answers_combined,
            current_question_index=0,
            current_subject_index=0,
            answers=[]
        )
        await send_next_question(state.bot, state, user_id, generated_subjects=generated_subjects)
        if not is_premium:
            await increment_generation_counter(user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        await state.bot.send_message(
            user_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=await get_main_menu_keyboard()
        )

async def generate_full_ent_questions(client: OpenAI, user_id: int, state: FSMContext, subject_1: str,
                                      subject_2: str) -> None:
    is_premium = await is_premium_user(user_id)
    num_questions = {"history": 20, "math_literacy": 10, "reading_literacy": 10, "profile1": 40, "profile2": 40}
    subjects = {
        "history": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
        "math_literacy": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
        "reading_literacy": "–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è",
        "profile1": subject_1,
        "profile2": subject_2,
    }
    all_questions = {}
    all_correct_answers = {}

    await state.bot.send_message(user_id, "‚è≥ –ò–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    try:
        for key, subject_name in subjects.items():
            prompt = (
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {num_questions[key]} —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject_name}' –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ù–¢. "
                "–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (A, B, C, D) –∏ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. "
                "–§–æ—Ä–º–∞—Ç:\n\n–í–æ–ø—Ä–æ—Å: ...\nA) ...\nB) ...\nC) ...\nD) ...\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: X\n\n"
                "–í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."
            )
            response = await asyncio.to_thread(
                client.chat.completions.create,
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7
            )
            generated_text = response.choices[0].message.content.strip()
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ {subject_name}:\n{generated_text}")

            question_blocks = [block.strip() for block in generated_text.split("\n\n") if block.strip()]
            subject_questions = []
            subject_correct_answers = []
            for block in question_blocks:
                lines = [line.strip() for line in block.split("\n") if line.strip()]
                if len(lines) < 6:
                    continue
                question_text = "\n".join(lines[:-1])
                correct_answer = lines[-1].split(":")[-1].strip().upper()
                if correct_answer in ("A", "B", "C", "D"):
                    subject_questions.append(question_text)
                    subject_correct_answers.append(correct_answer)

            all_questions[key] = subject_questions
            all_correct_answers[key] = subject_correct_answers

        await state.update_data(full_ent_questions=all_questions)
        await state.update_data(full_ent_correct_answers=all_correct_answers)
        await state.set_state(TestState.full_ent_start_subject)
        await send_full_ent_start_subject_choice(state.bot, state, user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ï–ù–¢: {e}")
        await state.bot.send_message(
            user_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=await get_main_menu_keyboard()
        )

# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
async def get_main_menu_keyboard():
    # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ keyboards.py)
    pass

async def can_generate_questions(user_id: int):
    # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ utils/statistics.py)
    pass

async def increment_generation_counter(user_id: int):
    # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ utils/statistics.py)
    pass

async def send_next_question(bot: Bot, state: FSMContext, user_id: int, generated_subjects: list = None):
    # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ handlers.py)
    pass

async def send_full_ent_start_subject_choice(bot: Bot, state: FSMContext, user_id: int):
    # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ handlers.py)
    pass

async def is_premium_user(user_id: int):
    # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ utils/statistics.py)
    user_statistics = await get_user_statistics()
    return user_statistics.get(user_id, {}).get("is_premium", False)

async def get_user_statistics():
    # ... (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–∞–º—è—Ç–∏)
    return {}