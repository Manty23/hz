from aiogram import Dispatcher, types
from aiogram.filters import StateFilter
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from utils.openai_utils import generate_questions, generate_full_ent_questions
from utils.statistics import user_statistics, can_generate_questions, increment_generation_counter
from states import TestState
from keyboards import (
    get_main_menu_keyboard,
    get_obligatory_subjects_keyboard,
    get_profile_subjects_keyboard_1,
    get_profile_subjects_keyboard_2,
    get_answer_keyboard,
    get_end_test_keyboard,
    ReplyKeyboardBuilder, KeyboardButton
)
import logging
logger = logging.getLogger(__name__)


# –ü—Ä–µ–¥–º–µ—Ç—ã (—Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∑–¥–µ—Å—å –∏–ª–∏ –≤ keyboards.py, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
OBLIGATORY_SUBJECTS = ["–ú–∞—Ç. –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å", "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", "–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è"]
PROFILE_SUBJECTS = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ë–∏–æ–ª–æ–≥–∏—è", "–•–∏–º–∏—è", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "–û—Å–Ω–æ–≤—ã –ø—Ä–∞–≤–∞", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω"]


async def cmd_start(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! üöÄ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=await get_main_menu_keyboard()
    )

async def cmd_help(message: types.Message) -> None:
    help_text = (
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ù–¢</b> üìö\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–¥–∏–Ω–æ–º—É –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é (–ï–ù–¢).\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "1Ô∏è‚É£ <b>üìñ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:</b>\n"
        "   - –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å, –ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏ –ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è.\n"
        "   - –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –±–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–ª—è –≤–∞—Å 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "2Ô∏è‚É£ <b>üß™ –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:</b>\n"
        "   - –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–≤–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n"
        "   - –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –§–∏–∑–∏–∫–∞, –ì–µ–æ–≥—Ä–∞—Ñ–∏—è, –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –ë–∏–æ–ª–æ–≥–∏—è, –•–∏–º–∏—è, –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫, –û—Å–Ω–æ–≤—ã –ø—Ä–∞–≤–∞, –¢–≤–æ—Ä—á–µ—Å–∫–∏–π —ç–∫–∑–∞–º–µ–Ω.\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n"
        "‚û°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏.\n"
        "‚û°Ô∏è –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤–∞–º –±—É–¥—É—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ (A, B, C, D).\n"
        "‚û°Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –±—É–∫–≤—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É.\n"
        "‚û°Ô∏è –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
        "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚û°Ô∏è /start - –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "‚û°Ô∏è üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ - –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.\n"
        "‚û°Ô∏è üíé Premium (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium-–ø–æ–¥–ø–∏—Å–∫–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
    )
    await message.answer(help_text, parse_mode="HTML")


async def handle_obligatory_subjects(message: types.Message, state: FSMContext) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=await get_obligatory_subjects_keyboard())
    await state.set_state(TestState.subject)
    await state.update_data(test_type="obligatory")


async def handle_select_obligatory(callback: types.CallbackQuery, state: FSMContext) -> None:
    subject = callback.data.split(":")[1]
    await callback.answer(f"–í—ã–±—Ä–∞–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {subject}", show_alert=False)
    await state.update_data(subject=subject)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {subject}\n‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤...")
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç 'client' (OpenAI) –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ state –∏–ª–∏ dp
    client = state.bot['openai_client']
    user_id = callback.from_user.id
    if client:
        await generate_questions(client, user_id, state, subject=subject)
    else:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç OpenAI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")


async def handle_profile_subjects(message: types.Message, state: FSMContext) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=await get_profile_subjects_keyboard_1())
    await state.set_state(TestState.profile_subject_1)
    await state.update_data(selected_profile_subjects=[])
    await state.update_data(test_type="profile")


async def handle_select_profile_1(callback: types.CallbackQuery, state: FSMContext) -> None:
    subject_1 = callback.data.split(":")[1]
    await callback.answer(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {subject_1}", show_alert=False)
    await state.update_data(profile_subject_1=subject_1, selected_profile_subjects=[subject_1])
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {subject_1}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç:")
    await callback.message.edit_reply_markup(reply_markup=await get_profile_subjects_keyboard_2(subject_1))
    await state.set_state(TestState.profile_subject_2)


async def handle_select_profile_2(callback: types.CallbackQuery, state: FSMContext) -> None:
    subject_2 = callback.data.split(":")[1]
    data = await state.get_data()
    subject_1 = data.get("profile_subject_1")
    if subject_1 and subject_2 != subject_1:
        await callback.answer(f"–í—ã–±—Ä–∞–Ω—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {subject_1} –∏ {subject_2}", show_alert=False)
        await state.update_data(profile_subject_2=subject_2, selected_profile_subjects=[subject_1, subject_2])
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {subject_1} –∏ {subject_2}\n‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤...")
        client = state.bot['openai_client'] # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        user_id = callback.from_user.id
        if client:
            await generate_questions(client, user_id, state, subject_1=subject_1, subject_2=subject_2)
        else:
            await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç OpenAI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    elif not subject_1:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.", show_alert=True)
    else:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø—Ä–µ–¥–º–µ—Ç –¥–≤–∞–∂–¥—ã.", show_alert=True)


async def handle_answer(message: types.Message, state: FSMContext) -> None:
    user_answer = message.text.upper()
    current_state = await state.get_state()
    data = await state.get_data()

    if current_state == TestState.full_ent_process:
        current_subject = data.get("full_ent_current_subject")
        current_question_index = data.get("full_ent_current_question_index", 1) - 1 # Adjust index to match the question number
        if current_subject and data.get("full_ent_questions", {}).get(current_subject) and current_question_index < len(data["full_ent_questions"][current_subject]):
            user_answers = data.get("full_ent_user_answers", {})
            if current_subject not in user_answers:
                user_answers[current_subject] = {}
            user_answers[current_subject][current_question_index] = user_answer
            await state.update_data(full_ent_user_answers=user_answers)
            await send_next_full_ent_question(message, state) # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∑–¥–µ—Å—å
        else:
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
    elif current_state == TestState.subject: # Handle answers for obligatory/profile subjects (single test)
        if "all_questions" in data and data["all_questions"]:
            answers = data.get("answers", [])
            answers.append(user_answer)
            await state.update_data(answers=answers)
            await send_next_question(message, state) # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∑–¥–µ—Å—å
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")


async def handle_restart_test(message: types.Message, state: FSMContext) -> None:
    await state.set_data({})
    await cmd_start(message, state)


async def handle_menu(message: types.Message, state: FSMContext) -> None:
    await cmd_start(message, state)


async def cmd_stats(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    if user_id in user_statistics:
        stats = user_statistics[user_id]
        report = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        report += f"–í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {stats.get('tests_passed', 0)}\n\n"
        if "scores" in stats and stats["scores"]:
            report += "<b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:</b>\n"
            for subject, scores in stats["scores"].items():
                if scores:
                    average_score = sum(scores) / len(scores)
                    report += f"  - {subject}: {average_score:.2f}%\n"
                else:
                    report += f"  - {subject}: –¢–µ—Å—Ç—ã –µ—â–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.\n"
        else:
            report += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n"
        await message.answer(report)
    else:
        await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–π–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Å—Ç.")

async def handle_start_full_ent(message: types.Message, state: FSMContext) -> None:
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢:", reply_markup=await get_profile_subjects_keyboard_1())
    await state.set_state(TestState.profile_subject_1_full)
    await state.update_data(full_ent_subjects={})

async def handle_select_profile_1_full(callback: types.CallbackQuery, state: FSMContext) -> None:
    subject_1 = callback.data.split(":")[1]
    await callback.answer(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {subject_1}", show_alert=False)
    await state.update_data(full_ent_subjects={"profile1": subject_1})
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {subject_1}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢:")
    await callback.message.edit_reply_markup(reply_markup=await get_profile_subjects_keyboard_2(subject_1))
    await state.set_state(TestState.profile_subject_2_full)

async def handle_select_profile_2_full(callback: types.CallbackQuery, state: FSMContext) -> None:
    subject_2 = callback.data.split(":")[1]
    data = await state.get_data()
    subject_1 = data.get("full_ent_subjects", {}).get("profile1")
    if subject_1 and subject_2 != subject_1:
        await callback.answer(f"–í—ã–±—Ä–∞–Ω—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {subject_1} –∏ {subject_2}", show_alert=False)
        await state.update_data(full_ent_subjects={"profile1": subject_1, "profile2": subject_2})
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω—ã –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {subject_1} –∏ {subject_2}\n‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢...")
        client = state.bot.get('openai_client')
        user_id = callback.from_user.id
        if client:
            await generate_full_ent_questions(client, user_id, state, subject_1=subject_1, subject_2=subject_2)
        else:
            await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç OpenAI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    elif not subject_1:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.", show_alert=True)
    else:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø—Ä–µ–¥–º–µ—Ç –¥–≤–∞–∂–¥—ã.", show_alert=True)

async def handle_full_ent_start_subject(message: types.Message, state: FSMContext) -> None:
    chosen_subject = message.text
    data = await state.get_data()
    subjects_map = {
        "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞": "history",
        "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å": "math_literacy",
        "–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è": "reading_literacy",
        data.get("full_ent_subjects", {}).get("profile1"): "profile1",
        data.get("full_ent_subjects", {}).get("profile2"): "profile2",
    }
    subject_key = next((key for name, key in subjects_map.items() if name == chosen_subject), None)

    if subject_key and data.get("full_ent_questions") and data.get("full_ent_questions").get(subject_key):
        await state.update_data(full_ent_current_subject=subject_key)
        await state.update_data(full_ent_current_question_index=0)
        await state.set_state(TestState.full_ent_process)
        await send_next_full_ent_question(message, state) # –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–¥–µ—Å—å
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

    async def is_full_ent_start_subject(message: types.Message, state: FSMContext) -> bool:
        if await state.get_state() == TestState.full_ent_start_subject:
            data = await state.get_data()
            profile_subject_1 = data.get("full_ent_subjects", {}).get("profile1")
            profile_subject_2 = data.get("full_ent_subjects", {}).get("profile2")
            valid_texts = ["–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å", "–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è"]
            if profile_subject_1:
                valid_texts.append(profile_subject_1)
            if profile_subject_2:
                valid_texts.append(profile_subject_2)
            return message.text in valid_texts
        return False

async def send_next_question(message: Message, state: FSMContext, generated_subjects: list = None) -> None:
    data = await state.get_data()
    current_question_index = data.get("current_question_index", 0)
    current_subject_index = data.get("current_subject_index", 0)
    all_questions = data.get("all_questions", [])
    selected_profile_subjects = data.get("selected_profile_subjects", [])
    subject = data.get("subject")  # –î–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤

    subjects_list_for_display = generated_subjects if generated_subjects else (selected_profile_subjects if selected_profile_subjects else [subject] if subject else [])

    if current_subject_index < len(all_questions):
        current_subject_questions = all_questions[current_subject_index]
        if current_question_index < len(current_subject_questions):
            question = current_subject_questions[current_question_index]
            subject_name = ""
            if current_subject_index < len(subjects_list_for_display):
                subject_name = subjects_list_for_display[current_subject_index]
            elif subject:
                subject_name = subject

            await message.answer(
                f"<b>–ü—Ä–µ–¥–º–µ—Ç: {subject_name}</b>\n<b>–í–æ–ø—Ä–æ—Å {current_question_index + 1}/{len(current_subject_questions)}:</b>\n{question}",
                reply_markup=await get_answer_keyboard()
            )
            await state.update_data(current_question_index=current_question_index + 1)
        else:
            await state.update_data(current_subject_index=current_subject_index + 1, current_question_index=0)
            await send_next_question(message, state, generated_subjects=generated_subjects)
    else:
        await process_test_results(message, state, generated_subjects=generated_subjects)

async def process_test_results(message: Message, state: FSMContext, generated_subjects: list = None) -> None:
    data = await state.get_data()
    all_correct_answers = data.get("all_correct_answers", [])
    answers = data.get("answers", [])
    selected_profile_subjects = data.get("selected_profile_subjects", [])
    test_type = data.get("test_type")
    results_text = "<b>üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞! üéâ</b>\n\n"
    total_correct = 0
    total_questions = 0
    answer_index = 0

    subjects_list_for_display = generated_subjects if generated_subjects else selected_profile_subjects if selected_profile_subjects else [data.get("subject")] if data.get("subject") else []

    for i, correct_answers_subject in enumerate(all_correct_answers):
        subject_correct_count = 0
        subject_total_questions = len(correct_answers_subject)
        total_questions += subject_total_questions
        subject_name = subjects_list_for_display[i] if i < len(subjects_list_for_display) else f"–ü—Ä–µ–¥–º–µ—Ç {i+1}"
        results_text += f"<b>–ü—Ä–µ–¥–º–µ—Ç: {subject_name}</b>\n"
        for correct_answer in correct_answers_subject:
            user_answer = answers[answer_index].upper() if answer_index < len(answers) else ""
            is_correct = user_answer == correct_answer.upper()
            if is_correct:
                subject_correct_count += 1
                total_correct += 1
                results_text += f"- ‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {correct_answer}\n"
            else:
                results_text += f"- ‚ùå –í–∞—à –æ—Ç–≤–µ—Ç: {user_answer}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {correct_answer}\n"
            answer_index += 1
        percentage = (subject_correct_count / subject_total_questions) * 100 if subject_total_questions > 0 else 0
        results_text += f"–ò—Ç–æ–≥–æ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_name}: {subject_correct_count}/{subject_total_questions} ({percentage:.2f}%)\n\n"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        user_id = message.from_user.id
        if user_id not in user_statistics:
            user_statistics[user_id] = {"tests_passed": 0, "scores": {}}
        if subject_name not in user_statistics[user_id]["scores"]:
            user_statistics[user_id]["scores"][subject_name] = []
        user_statistics[user_id]["scores"][subject_name].append(percentage)

    overall_percentage = (total_correct / total_questions) * 100 if total_questions > 0 else 0
    results_text += f"\n<b>–û–±—â–∏–π –∏—Ç–æ–≥:</b> {total_correct}/{total_questions} ({overall_percentage:.2f}%)\n"

    await message.answer(results_text, reply_markup=await get_end_test_keyboard())
    user_statistics[user_id]["tests_passed"] = user_statistics[user_id].get("tests_passed", 0) + 1
    logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_statistics[user_id]}")

async def cmd_premium(message: types.Message, state: FSMContext) -> None:
    premium_info = (
        "üöÄ <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ù–¢</b> üíé\n\n"
        "–û—Ñ–æ—Ä–º–∏—Ç–µ Premium –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —É–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ç–µ—Å—Ç –¥–æ 10!\n\n"
        "–°–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):\n"
        "    - ...\n"
        "    - ...\n\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    )
    await message.answer(premium_info, parse_mode="HTML")


async def send_next_full_ent_question(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    current_subject = data.get("full_ent_current_subject")
    current_question_index = data.get("full_ent_current_question_index", 0)
    all_questions = data.get("full_ent_questions", {})
    subjects_map = {
        "history": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
        "math_literacy": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
        "reading_literacy": "–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è",
        "profile1": data.get("full_ent_subjects", {}).get("profile1", "–ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç 1"),
        "profile2": data.get("full_ent_subjects", {}).get("profile2", "–ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç 2"),
    }

    if current_subject and current_subject in all_questions:
        questions = all_questions[current_subject]
        if current_question_index < len(questions):
            question = questions[current_question_index]
            subject_name = subjects_map.get(current_subject, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
            await message.answer(
                f"<b>–ü—Ä–µ–¥–º–µ—Ç: {subject_name}</b>\n<b>–í–æ–ø—Ä–æ—Å {current_question_index + 1}/{len(questions)}:</b>\n{question}",
                reply_markup=await get_answer_keyboard(),
            )
            await state.update_data(full_ent_current_question_index=current_question_index + 1)
        else:
            # –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π
            await state.update_data(full_ent_current_question_index=0)
            await send_full_ent_next_subject_choice(message, state)
    else:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")

async def send_full_ent_next_subject_choice(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    finished_subjects = data.get("full_ent_user_answers", {}).keys()
    available_subjects = {
        "history": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
        "math_literacy": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
        "reading_literacy": "–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è",
        "profile1": data.get("full_ent_subjects", {}).get("profile1"),
        "profile2": data.get("full_ent_subjects", {}).get("profile2"),
    }
    keyboard_builder = ReplyKeyboardBuilder()
    remaining_subjects = {key: name for key, name in available_subjects.items() if
                          key not in finished_subjects and name is not None}

    if remaining_subjects:
        for key, name in remaining_subjects.items():
            keyboard_builder.button(text=name)
        keyboard_builder.adjust(2)
        await message.answer(
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ï–ù–¢'.",
            reply_markup=keyboard_builder.row(KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ï–ù–¢")).as_markup(
                resize_keyboard=True, one_time_keyboard=True),
        )
        await state.set_state(TestState.full_ent_process)  # Stay in the process state for choosing next subject
    else:
        await process_full_ent_results(message, state)

async def process_full_ent_results(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    all_correct_answers = data.get("full_ent_correct_answers", {})
    user_answers = data.get("full_ent_user_answers", {})
    subjects_map = {
        "history": "–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞",
        "math_literacy": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
        "reading_literacy": "–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è",
        "profile1": data.get("full_ent_subjects", {}).get("profile1", "–ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç 1"),
        "profile2": data.get("full_ent_subjects", {}).get("profile2", "–ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç 2"),
    }
    num_questions = {"history": 20, "math_literacy": 10, "reading_literacy": 10, "profile1": 40, "profile2": 40}
    total_correct = 0
    total_questions = 0
    results_text = "<b>üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–±–Ω–æ–≥–æ –ï–ù–¢! üéâ</b>\n\n"

    for subject_key, correct_answers in all_correct_answers.items():
        subject_name = subjects_map.get(subject_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        user_subject_answers = user_answers.get(subject_key, {})
        correct_count = 0
        questions_count = num_questions.get(subject_key, 0)
        total_questions += questions_count

        results_text += f"<b>{subject_name}:</b>\n"
        for i in range(questions_count):
            correct_answer = correct_answers[i] if i < len(correct_answers) else None
            user_answer = user_subject_answers.get(i)
            if correct_answer and user_answer == correct_answer:
                correct_count += 1
                total_correct += 1
                results_text += f"  –í–æ–ø—Ä–æ—Å {i + 1}: ‚úÖ (–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer})\n"
            elif correct_answer:
                results_text += f"  –í–æ–ø—Ä–æ—Å {i + 1}: ‚ùå (–í–∞—à –æ—Ç–≤–µ—Ç: {user_answer if user_answer else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer})\n"
            else:
                results_text += f"  –í–æ–ø—Ä–æ—Å {i + 1}: ‚ùì (–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)\n"

        score_percent = (correct_count / questions_count) * 100 if questions_count > 0 else 0
        results_text += f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {correct_count}/{questions_count} ({score_percent:.2f}%)\n\n"

    overall_score = (total_correct / total_questions) * 100 if total_questions > 0 else 0
    results_text += f"\n<b>–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_correct}/{total_questions} ({overall_score:.2f}%)</b>\n"

    await message.answer(results_text, reply_markup=await get_end_test_keyboard(), parse_mode="HTML")
    await state.set_data({})  # Clear state after the test

async def cmd_premium(message: types.Message, state: FSMContext) -> None:
    premium_info = (
        "üöÄ <b>Premium –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ù–¢</b> üíé\n\n"
        "–û—Ñ–æ—Ä–º–∏—Ç–µ Premium –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —É–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ç–µ—Å—Ç –¥–æ 10!\n\n"
        "–°–ø–æ—Å–æ–±—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):\n"
        "    - ...\n"
        "    - ...\n\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    )
    await message.answer(premium_info, parse_mode="HTML")

def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command(commands=["start"]))
    dp.message.register(cmd_help, Command(commands=["help"]))
    dp.message.register(cmd_premium, Command(commands=["premium"]))
    dp.message.register(handle_obligatory_subjects, lambda message: message.text == "üìñ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã")
    dp.callback_query.register(handle_select_obligatory, lambda callback: callback.data.startswith("obligatory:"))
    dp.message.register(handle_profile_subjects, lambda message: message.text == "üß™ –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã")
    dp.callback_query.register(handle_select_profile_1, lambda callback: callback.data.startswith("profile1:"))
    dp.callback_query.register(handle_select_profile_2, lambda callback: callback.data.startswith("profile2:"))
    dp.message.register(handle_answer, lambda message: message.text.upper() in ("A", "B", "C", "D"))
    dp.message.register(handle_restart_test, lambda message: message.text == "üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑")
    dp.message.register(handle_menu, lambda message: message.text == "‚ò∞ –ú–µ–Ω—é")
    dp.message.register(cmd_stats, lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.message.register(handle_start_full_ent, lambda message: message.text == "üß™ –ü—Ä–æ–±–Ω—ã–π –ï–ù–¢")
    dp.callback_query.register(handle_select_profile_1_full, lambda callback: callback.data.startswith("profile1:"))
    dp.callback_query.register(handle_select_profile_2_full, lambda callback: callback.data.startswith("profile2:"))
    dp.message.register(handle_full_ent_start_subject, lambda message: message.text.in_(["–ò—Å—Ç–æ—Ä–∏—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å", "–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è"] + PROFILE_SUBJECTS), StateFilter(TestState.full_ent_start_subject))